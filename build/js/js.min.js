/**
 * Checks if this year is leap or not
 * @param year which we need to check
 * @returns {boolean}
 */
function isLeapYear(year) {
    return new Date(year, 1, 29).getMonth() == 1;
}

/**
 * Converts date to "24-Nov-2009 17:57:35" format, see getUnixTime() for more info
 * @param date which nned to be converted
 * @returns {string}
 */
function formatDateToString(date) {
    return date.getDate() + "-" + getMonthName(date) + "-" + date.getFullYear() + " 00:00:00";
}

/**
 * Returns unixtime in seconds
 * @param time in "24-Nov-2009 17:57:35" format, see formatDateToString() for more info
 * @returns {number}
 */
function getUnixTime(time) {
    return new Date(time).getTime() / 1000;
}

/**
 * Returns date generated from day and year
 * @param day of the year, from 1 january (e.g. 364 will be 30 december in non-leap year, and 29 december in leap year)
 * @param year
 * @returns {Date}
 */
function getDateFromDay(day, year) {
    var date = new Date(year, 0);
    return new Date(date.setDate(day)); // add the number of days
}

/**
 * Returns month name in short format for the formatDateToString()
 * @param date
 * @returns {string}
 */
function getMonthName(date) {
    return date.toLocaleString("en-us", {month: "short"});
}

/**
 * Converts date to "28.12.1990" format
 * @param date
 * @returns {string}
 */
function getStringFromDate(date) {
    return date.getDate() + "." + (date.getMonth() + 1) + "." + date.getFullYear();
}

/**
 * Resets seconds, minutes and hours in the date
 * @param date
 * @returns {*}
 */
function resetTimeInDate(date) {
    date.setMinutes(0);
    date.setSeconds(0);
    date.setHours(0);
    return date;
}
document.addEventListener('DOMContentLoaded', function () {
    var el_days = get("days"),
        loader = get("loader"),
        input = get("input"),
        go_btn = get("go"),
        birth = {
            day: get("birth-day"),
            month: get("birth-month"),
            year: get("birth-year")
        };

    //User's birth date object
    var user_date = {
        year: false,
        month: false,
        day: false,
        set: function (d, m, y) {
            this.day = parseInt(d, 10);
            this.month = parseInt(m, 10);
            this.year = parseInt(y, 10);
        },
        check: function () {
            return (this.year && this.month && this.day);
        },
        init: function () {
            this.date = new Date(this.year, this.month - 1, this.day);
            this.date_sec = getUnixTime(formatDateToString(this.date));
        }
    };

    //Now time object
    var now = {
        date: resetTimeInDate(new Date()),
        init: function () {
            //Set year and day in unixtime format
            this.year = this.date.getFullYear();
            this.date_sec = getUnixTime(formatDateToString(this.date));
        }
    };
    now.init();

    //Check if it's localhosted version and user's birth is defined
    if (user_date.check()) {
        hideElement(input);

        setTimeout(function () {
            renderDays(el_days, now, user_date, function () {
                hideElement(loader);
            });
        }, 100);
    }

    //Hide helpful elements
    hideElement(loader);
    hideElement(get("alert"));
    hideElement(get("save"));

    //Add action on "go" btn
    go_btn.addEventListener("click", function () {
        go(user_date, birth, loader, input, el_days, now);
    });

    //Also add trigger to enter press
    input.addEventListener("keypress", function(e){
        if (e.keyCode == 13) {
            go(user_date, birth, loader, input, el_days, now);
        }
    });

    //Add cation on "save" btn
    get("save").addEventListener("click", function () {
        if(saver.save(user_date)){
            showAlert("Saved successfully")
        }else{
            showAlert("Can't save, please open an issue");
        }
    });
});

function go(user_date, birth, loader, input, el_days, now){
    //Check if we have valid input data
    if (validateInput(birth)) {
        //Update user's birth date object
        user_date.set(
            birth.day.value,
            birth.month.value,
            birth.year.value
        );
        user_date.init();

        //Show loader and hide input forms
        showElement(loader);
        hideElement(input);

        //Dirty hack to let UI get loaded
        setTimeout(function () {
            //Start rendering days
            renderDays(el_days, now, user_date, function () {
                hideElement(loader);
                showElement(get("save"));

                //update text color to black
                addClass(get("alert"), "black");
            });
        }, 100);
    }
}
/**
 * Return amount of days from 1 january till user's birthday
 * @param user_date object with user's birth info(see main.js)
 * @returns {number}
 */
function getDaysTillBirthday(user_date) {
    var date = new Date(user_date.year, 0, 1);
    var date_sec = getUnixTime(formatDateToString(date));

    return -Math.floor((user_date.date_sec - date_sec) / (60 * 60 * 24));
}
/**
 * Generates a lot of divs with days
 * @param el wrapper for days divs
 * @param now time object(see main.js for more info)
 * @param user_date user's birth object(see main.js for more info)
 * @param callback function which will be called when all days will be generated
 */
function renderDays(el, now, user_date, callback) {
    //@TODO: optimize this function
    var y, //counter for year
        till, //user birth + 80 years
        d, //amount of days in the year
        k, //counter for rows of the year
        rows_amount, //counter for rows of the year
        j, //counter for days in the year
        c, //total counter for days amount
        year, //div block for year
        year_rows_wrap, //div block for wrap of the days
        half_year; //div block for year row

    c = getDaysTillBirthday(user_date);
    till = user_date.year + 80;
    y = user_date.year;

    while (y <= now.year) {
        if (isLeapYear(y)) {
            d = 366;
        } else {
            d = 365;
        }

        year = generateYear(y);

        //Create rows and days
        year_rows_wrap = document.createElement('div');
        year_rows_wrap.setAttribute('class', "half-year-wrap");
        rows_amount = 5;
        k = 1;
        j = 1;
        while (k <= rows_amount) {
            //Generate year row
            half_year = document.createElement('div');
            half_year.setAttribute('class', "half-year");

            //Generate days in row
            j = generateDays(user_date, now, j, Math.ceil(d * (k / rows_amount)), y, half_year, c);

            //Append year
            year_rows_wrap.appendChild(half_year);
            k++;
        }
        c += j - 1;
        year.appendChild(year_rows_wrap);

        //Append year
        el.appendChild(year);

        y++;
    }

    //Generate other days
    while (y <= till) {
        if (isLeapYear(y)) {
            d = 366;
        } else {
            d = 365;
        }

        year = generateYear(y);

        //Create rows and days
        year_rows_wrap = document.createElement('div');
        year_rows_wrap.setAttribute('class', "half-year-wrap");
        rows_amount = 5;
        k = 1;
        j = 1;
        while (k <= rows_amount) {
            //Generate year row
            half_year = document.createElement('div');
            half_year.setAttribute('class', "half-year");

            //Generate days in row
            j = generateFutureDays(j, Math.ceil(d * (k / rows_amount)), y, half_year, c);

            //Append year
            year_rows_wrap.appendChild(half_year);
            k++;
        }
        c += j - 1;
        year.appendChild(year_rows_wrap);

        //Append year
        el.appendChild(year);
        y++;
    }

    //Run callback
    if (typeof callback === "function") {
        callback();
    }
}
/**
 * Generates a day-div element and appends it to toAppend element
 * @param toAppend element to which generated day will be append
 * @param classes of this day-div element
 * @param data_day data-attribute for the current day
 * @param data_date data-attribute for the current date
 * @param title which will be displayed when you will hover the day-div element
 */
function generateDay(toAppend, classes, data_day, data_date, title) {
    var day = document.createElement('div');
    day.setAttribute('class', 'day ' + classes);
    day.setAttribute('title', title);
    day.setAttribute('data-day', data_day);
    day.setAttribute('data-date', data_date);
    toAppend.appendChild(day);
}
/**
 * Generate days_divs from start till max, checks for ended, current or future days and returns updated start counter
 * @param user_date user's birth object(see main.js for more info)
 * @param now time object(see main.js for more info)
 * @param start from which day we need to generate
 * @param max till which day we need to generate
 * @param year num of current year
 * @param toAppend div to which we weill append this days
 * @param days_counter global counter for days of life amount
 * @returns {*}
 */
function generateDays(user_date, now, start, max, year, toAppend, days_counter) {
    var day_class, //class for the day
        day_title, //title for the day
        this_date, //current day in a row
        this_day; //current day in unixtime format
    while (start <= max) {
        day_class = '';
        this_date = getDateFromDay(start, year);
        this_day = getUnixTime(formatDateToString(this_date));

        if (user_date.date_sec <= this_day && this_day < now.date_sec) {
            day_class += " ended";
        }

        if (this_day == now.date_sec) {
            day_class += " current";
        }

        if(this_day < user_date.date_sec){
            day_title = "[" + getStringFromDate(this_date) + "]";
        }else{
            day_title = "[" + getStringFromDate(this_date) + "] " + (days_counter + start) + " day of your life";
        }

        generateDay(toAppend, day_class, start, this_date, day_title);

        start++;
    }
    return start;
}
/**
 * Generate days_divs from start till max with only 1 class - "day" and returns updated start counter
 * (used for generating future days of your life)
 * @param start from which day we need to generate
 * @param max till which day we need to generate
 * @param year num of current year
 * @param toAppend div to which we weill append this days
 * @param days_counter global counter for days of life amount
 * @returns {*}
 */
function generateFutureDays(start, max, year, toAppend, days_counter) {
    var day_class, //class for the day
        day_title, //title for the day
        this_date, //current day in a row
        this_day; //current day in unixtime format
    while (start <= max) {
        day_class = '';
        this_date = getDateFromDay(start, year);
        this_day = getUnixTime(formatDateToString(this_date));

        day_title = "[" + getStringFromDate(this_date) + "] " + (days_counter + start) + " day of your life";

        generateDay(toAppend, day_class, start, this_date, day_title);

        start++;
    }
    return start;
}
/**
 * Generates year div with current title
 * @param year
 * @returns {Element}
 */
function generateYear(year) {
    var year_div = document.createElement('div');
    year_div.setAttribute('class', "year");

    //Year title
    var year_title = document.createElement('div');
    year_title.textContent = year;
    year_title.setAttribute('class', "year-title");
    year_div.appendChild(year_title);

    return year_div;
}
/**
 * Shows alert/notification block with the message
 * @param message which will be displayed
 */
function showAlert(message) {
    var div = document.getElementById("alert");
    div.textContent = message;
    addClass(div, "animate-from-down");
    showElement(div);
    setTimeout(function () {
        hideElement(div);
        removeClass(div, "animate-from-down");
    }, 3000);
}
/**
 * Adds class to the element
 * @param el to which we will add the classname
 * @param classname which will be added to the element
 */
function addClass(el, classname) {
    el.classList.add(classname);
}

/**
 * Removes class from the element
 * @param el from which we will remove the classname
 * @param classname which will be removed from the element
 */
function removeClass(el, classname) {
    el.classList.remove(classname);
}
/**
 * Dumps and returns all css styles on the page
 * @returns {*}
 */
function dumpStyles() {
    var crossrule;
    if (document.styleSheets[0].cssRules) {
        crossrule = document.styleSheets[0].cssRules
    } else if (document.styleSheets[0].rules) {
        crossrule = document.styleSheets[0].rules
    }

    if(!crossrule){
        showAlert("Can't save css styles, please open an issue");
        return false;
    }

    var i = 0;
    var dump = "";
    while(i < crossrule.length){

        dump += crossrule[i].cssText;
        i++;
    }

    return dump;
}
/**
 * Alias for getElementById()
 * @param id
 * @returns {Element}
 */
function get(id){
    return document.getElementById(id);
}
/**
 * Logging str to console, used for debug
 * @param str
 */
function l(str) {
    console.log(str);
}
/*
 * Saves generated days
 */
var saver = {
    html: {
        header: {
            open: '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><title>My Life</title>',
            close: '</head><body><header><div class="title">My Life</div><div class="arrow">&darr; Years | Days &rarr;</div></header>'
        },
        footer: "</body></html>"
    },
    save: function(user_date){
        var html = this.html.header.open +
            this.generate.js(user_date) + this.generate.css() +
            this.html.header.close +
            this.generate.body() +
            this.html.footer;

        //Download .html via downloadjs library
        return download(html, "days.html", "text/plain");
    },
    generate: {
        js: function(ud){
            return '<script>' +
                'function resetTimeInDate(e){return e.setMinutes(0),e.setSeconds(0),e.setHours(0),e}function getUnixTime(e,t){return t?Math.floor(new Date(e).getTime()/1e3):Math.floor(e.getTime()/1e3)}function getCurrent(e,t,n){for(var i,r=getUnixTime(resetTimeInDate(new Date(e,t-1,n))),a=getUnixTime(resetTimeInDate(new Date)),s=document.getElementsByClassName("day"),d=0;d<s.length;d++)i=getUnixTime(s[d].getAttribute("data-date"),!0),i>=r&&a>i&&(s[d].classList.remove("current"),s[d].classList.add("ended")),i===a&&s[d].classList.add("current")}' +
                'document.addEventListener("DOMContentLoaded",function(){' +
                'getCurrent(' + ud.year + ',' + ud.month + ',' + ud.day + ')});' +
                '</script>';
        },
        css: function(){
            return '<style>' + dumpStyles() + '</style>';
        },
        body: function(){
            return get("days-wrap").outerHTML;
        }
    }
};
/**
 * Validates user's input and shows alerts if it's not ok
 * @param divs object with every input for the birthday(see main.js for more info)
 * @returns {boolean}
 */
function validateInput(divs) {
    var d = divs.day.value,
        m = divs.month.value,
        y = divs.year.value;

    //Check if empty
    if (!(d && m && y)) {
        showAlert("Input is empty");
        return false;
    }

    //Check if it is integer
    if (!(parseInt(d) && parseInt(m) && parseInt(y))) {
        showAlert("Please, input a number");
        return false;
    }

    //Check ig we have very small year
    if (y < 1910) {
        showAlert("Please, stop hacking this site");
        return false;
    }

    //Check if all dates are okay
    //@TODO: add check for the 30 and 29 days(like isLeapYear())
    if (d <= 31 && m <= 12) {
        return true;
    } else {
        showAlert("Please, input a valid date");
        return false;
    }
}
/**
 * Removes "none" class from the element
 * @param el
 */
function showElement(el) {
    removeClass(el, "none");
}

/**
 * Adds "none" class to the element
 * @param el
 */
function hideElement(el) {
    addClass(el, "none");
}